#! /usr/bin/perl -w
# File: new-mail-process.pl
# Time-stamp: <2011-10-22 22:39:44 srivasta>
#
# Copyright (C) 2009 by Manoj Srivastava
#
# Author: Manoj Srivastava
#
# Description:
#
#  The idea here is to process a bunch pf mail folders, which are
#  supposed to contain mail which is either all ham or all spam,
#  indicated by the command line arguments. We go looking though every
#  mail, and any mail where either the crm114 or the spamasssin
#  judgement was non what we expected, train the approprite filter,
#  making full use of the reaver cache and the CacheID header.

use warnings;
use strict;
use Carp;

($main::MYNAME     = $main::0) =~ s|.*/||;
$main::Author      = "Manoj Srivastava";
$main::AuthorMail  = "srivasta\@debian.org";

require 5.002;
use Getopt::Long;


use Mail::Box::Manager;
# The archive directory. Must have subdirs ham and spam, to archive
# messages we act upon
my $home = $ENV{'HOME'} || $ENV{'LOGDIR'} || (getpwuid($<))[7] || 
  die "You're homeless!\n";
my $crmdir = "$home/var/lib/crm114";



=head1 SYNOPSIS

usage: list-grey [options] mail-folder [mail-folder ...]

=cut

=head1 DESCRIPTION

The idea here is to process a bunch pf mail folders, which are
supposed to contain mail which is either all ham or all spam,
indicated by the command line arguments. We go looking though every
mail, and any mail where either the crm114 or the spamasssin judgement
was non what we expected, we train the approprite filter.


=head2 Normal Usage

The tested use case is one where the mail folders parsed are mbox
folders.

=cut

=head1 OPTIONS

=over 3

=item B<--help> Print out a usage message.

=cut

my $help_opt = '';
my $spam = '';
my $ham  = '';

my %option_ctl = 
  (
   "help"                => \$help_opt,
   "spam"                => \$spam,
   "ham"                 => \$ham,
  );

my $usage = <<"EOUSAGE";
usage: $main::MYNAME [options] mail-folder [mail-folder ...]
    where the options are:
    --help              This message
    --spam|--ham        Whether the folder is ham or spam
 $main::Author <$main::AuthorMail>
EOUSAGE

sub main() {
  my $ret;
  my $type    = '';
  my $crmtype = '';
  my $seq_type= '';

  $ret = GetOptions(%option_ctl);
  if (!$ret) {
    print "use --help to display command line syntax help.\n" ;
    exit 1;
  }
  if ($help_opt) {
    print "$usage";
    exit 0;
  }
    
  if (!($spam || $ham)) {
    die "At least one of ham or spam must be specified\n";
  }
  if ($spam && $ham) {
    die "Only one of ham or spam must be specified\n";
  }
  $type    = "ham"          if $ham;
  $type    = "spam"         if $spam;
  $crmtype = "good"         if $ham; # nonspam, is using mailfilter
  $crmtype = "spam"         if $spam;
   
  #  Get a new mail manager
  my $mgr     = Mail::Box::Manager->new;
    
  # Process folders given on the command line
  for my $name (@ARGV) {
    my $folder = $mgr->open(folder => "$name");
    warn "Examining folder '$folder' of type $type\n";
    # Iterate over the messages.
    foreach my $msg ($folder->messages) {
      my ($sa, $crm) = (undef,undef);
      my $head = $msg->head;
      my $not_done = 0;
      my $train_sa  = 0;
      my $train_crm = 0;

      # We rely on reaver file cache
      my $reaver_file =  $head->study('X-CRM114-CacheID');
      warn "No X-CRM114-CacheID found in $name.\n" unless $reaver_file;
      next unless $reaver_file;

      $reaver_file    =~ s/^\s*sfid-//o;
      warn "discarding $reaver_file , no Cached file found.\n"
        unless -f "${crmdir}/reaver_cache/texts/$reaver_file";
      next unless -f "${crmdir}/reaver_cache/texts/$reaver_file";

      my $spam_values =  $head->get('X-SA-Orig');
      $spam_values    =~ s/\s+//g             if $spam_values;
      ($sa, $crm) = split (",", $spam_values) if $spam_values;
      undef $spam_values;

      my $crm_status  = $head->get('X-CRM114-Status');
      if ($crm_status && $crm_status =~ m/UNSURE/ig) {
        warn "TRAIN CRM\n";
        $train_crm++;
        $not_done++;
      }

      if ($spam) {
        if (($crm && $crm < 0) || (! defined $crm)) {
          warn "TRAIN CRM\n";
          $train_crm++;
          $not_done++;
        }
        if (($sa && $sa < 0) || (! defined $sa) ) {
          warn "TRAIN SA\n";
          $train_sa++;
          $not_done++;
        }
      }
      else {
        if (($crm && $crm > 0) || (! defined $crm)) {
          warn "TRAIN CRM\n";
          $train_crm++;
          $not_done++;
        }
        if (($sa && $sa > 0) || (! defined $sa) ) {
          warn "TRAIN SA\n";
          $train_sa++;
          $not_done++;
        }
      }
      next unless $not_done;
      if (! -e "${crmdir}/reaver_cache/known_${crmtype}/$reaver_file") {
          # let mailreaver decide whether or not to train
          warn "crm -u $crmdir ${crmdir}/mailreaver.crm --config=${crmdir}/mailfilter.cf --${crmtype} --fileprefix=${crmdir}/ < ${crmdir}/reaver_cache/texts/$reaver_file | egrep 'file reaver_cache|^X-CRM114-Action'\n";
          my @crmlog = `crm -u $crmdir ${crmdir}/mailreaver.crm --config=${crmdir}/mailfilter.cf --${crmtype} --fileprefix=${crmdir}/ < ${crmdir}/reaver_cache/texts/$reaver_file | egrep 'file reaver_cache|^X-CRM114-Action'`;

          foreach my $line (@crmlog) {
              print "$line";
              next unless $line =~ m/train/;
              # if we had to retrain crm, make sure link exists
              if (! -e "${crmdir}/reaver_cache/known_${crmtype}/$reaver_file" ) {
                  warn "Linking " .   "${crmdir}/reaver_cache/texts/$reaver_file" .
                      "to ${crmdir}/reaver_cache/known_${crmtype}/$reaver_file\n" ;
                  link "${crmdir}/reaver_cache/texts/$reaver_file",
                  "${crmdir}/reaver_cache/known_${crmtype}/$reaver_file" ;
              }
              else {
                  warn "${crmdir}/reaver_cache/known_${crmtype}/$reaver_file exists\n";
              }
          }
      }
      else {
          warn "Already trained $reaver_file\n";
      }
      if ($train_sa) {
          my @args = ("sa-learn", "--${type}", "--mbox", "${crmdir}/reaver_cache/texts/$reaver_file");
          system(@args) == 0 or
              warn "Could not open a pipe to sa-learn: $!";
      }
    }
    $folder->close(write => 'NEVER');
  }
  #my @args = ("sa-learn", "--sync");
  #system(@args) == 0 or die "Could not open a pipe to sa-learn: $!";
  exit 0;
}

## Now just call main
&main();

=head1 RETURN VALUE

The program returns 0 on succesful completion, and non-zero exit
values otherwise.

=cut

=head1 ERRORS

=cut

=head1 DIAGNOSTICS

=cut

=head1 EXAMPLES

=cut

=head1 ENVIRONMENT

=cut


=head1 FILES

=cut

=head1 CAVEATS

=cut

=head1 BUGS

None known so far.

=cut

=head1 RESTRICTIONS

The input folders are meant to be mbox folders

=cut

=head1 NOTES

=cut

=head1 SEE ALSO

=cut

=head1  COPYRIGHT AND LICENSE

Copyright 2006 by Manoj Srivastava.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

=cut

=head1 AUTHOR

Manoj Srivastava C<srivasta\@debian.org>

=cut

exit 0;
__END__
