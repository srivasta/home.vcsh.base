#!/bin/bash

LIST=$( git status | grep -e '\#.*\(modified\|added\|new file\)' | grep -v '\#.*\(features\|contribs\|devel\)' )
files=$(git diff-index --name-only HEAD | grep -e '\.js$')

DIR=$(git rev-parse --show-toplevel)
EMAIL=$(git config user.email)
TMPFILE=$(mktemp)

# The current directory is the top level of the working tree.
#    GIT_DIR is set to ‘.git’
#    GIT_INDEX_FILE is set to ‘.git/index’


if git-rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi


function check_php() {
    git diff --cached --name-status --diff-filter=ACMR | while read STATUS FILE; do
        # Skip deleted files.
        if [ "$STATUS" == 'D' ]; then continue; fi
        if [[ "$FILE" =~ ^.+(php|inc)$ ]]; then
            php -l "$FILE" 1> /dev/null
            if [ $? -ne 0 ]; then
                echo "Aborting commit due to files with syntax errors" >&2
                exit 1
            fi
        fi
    done
}

function check_nonascii() {
    # If you want to allow non-ascii filenames set this variable to true.
    allownonascii=$(git config hooks.allownonascii)

    # Cross platform projects tend to avoid non-ascii filenames; prevent
    # them from being added to the repository. We exploit the fact that the
    # printable range starts at the space character and ends with tilde.
    if [ "$allownonascii" != "true" ] &&
           # Note that the use of brackets around a tr range is ok here, (it's
           # even required, for portability to Solaris 10's /usr/bin/tr), since
           # the square bracket bytes happen to fall in the designated range.
           test "$(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0')"
    then
        echo "Error: Attempt to add a non-ascii file name."
        echo
        echo "This can cause problems if you want to work"
        echo "with people on other platforms."
        echo
        echo "To be portable it is advisable to rename the file ..."
        echo
        echo "If you know what you are doing you can disable this"
        echo "check using:"
        echo
        echo "  git config hooks.allownonascii true"
        echo
        exit 1
    fi
}

function check_style() {
    if git-rev-parse --verify HEAD 2>/dev/null; then
       git-diff-index -p -M --cached HEAD -- |
           perl -e '
    my $found_bad = 0;
    my $filename;
    my $reported_filename = "";
    my $lineno;
    sub bad_line {
        my ($why, $line) = @_;
        if (!$found_bad) {
            print STDERR "*\n";
            print STDERR "* You have some suspicious patch lines:\n";
            print STDERR "*\n";
            $found_bad = 1;
        }
        if ($reported_filename ne $filename) {
            print STDERR "* In $filename\n";
            $reported_filename = $filename;
        }
        print STDERR "* $why (line $lineno)\n";
        print STDERR "$filename:$lineno:$line\n";
    }
    while (<>) {
        if (m|^diff --git a/(.*) b/\1$|) {
            $filename = $1;
            next;
        }
        if (/^@@ -\S+ \+(\d+)/) {
            $lineno = $1 - 1;
            next;
        }
        if (/^ /) {
            $lineno++;
            next;
        }
        if (s/^\+//) {
            $lineno++;
            chomp;
            if (/\s$/) {
                bad_line("trailing whitespace", $_);
            }
            if (/^\s* \t/) {
                bad_line("indent SP followed by a TAB", $_);
            }
            if (/^([<>])\1{6} |^={7}$/) {
                bad_line("unresolved merge conflict", $_);
            }
        }
    }
    exit($found_bad);
'
    fi
}
if git diff-index --quiet HEAD --; then
    #  no changes between index and working copy; just run tests
    check_php
    check_nonascii
    check_style
else
    # Stash uncommited changes before running tests
    git stash -q --keep-index
    check_php
    check_nonascii
    check_style
    git stash pop -q
fi
