#! /bin/bash
#                               -*- Mode: Sh -*-
# remote_build ---
# Author           : Manoj Srivastava ( srivasta@anzu.internal.golden-gryphon.com )
# Created On       : Thu Feb 12 10:10:08 2009
# Created On Node  : anzu.internal.golden-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Thu Feb 12 14:06:59 2009
# Last Machine Used: anzu.internal.golden-gryphon.com
# Update Count     : 42
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
#

progname=$(basename "$0")
set -e

######################################################################
#### Tweak these as you see fit
mount_point=/usr/local/src
workdir_top=$mount_point/input
results_dir=$mount_point/results
staging_dir=$HOME/build
######################################################################


unset -v   LANGUAGE
unset -v   LC_ALL
unset -v   LC_PAPER
unset -v   LC_ADDRESS
unset -v   LC_MONETARY
unset -v   LC_NUMERIC
unset -v   LC_TELEPHONE
unset -v   LC_TYPE
unset -v   LC_MESSAGES
unset -v   LC_COLLATE
unset -v   LC_IDENTIFICATION
unset -v   LC_MEASUREMENT
unset -v   LC_CTYPE
unset -v   LC_TIME
unset -v   LC_NAME
unset -v   LANG
export LANG=C
export LC_ALL=C
export PATH=$HOME/sbin:$HOME/bin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin

withecho () {
    echo "$@" >&2
    "$@"
}
action='withecho'
#action='echo'
opt_pkg=
VERBOSE=

usageversion () {
        cat >&2 <<END
Usage: $progname  [options]
Options:
  -h           print this message
  -n           "Dry-run" mode - No action taken, only print commands.
  -p name      Over ride the package name
  -v           Make the command verbose

END
}

# parse Command line
# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -a -s bash -o hnvp: -n 'stage_release' -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"
while true ; do
    case "$1" in
        -h|--help) usageversion; exit 0   ; shift   ;;
        -n)      action='echo'            ; shift   ;;
        -p)      opt_pkg="$2"             ; shift 2 ;;
        -v)      VERBOSE=1                ; shift   ;;
        --)      shift ; break ;;
        *) echo >&2 "Internal error!($i)"
            usageversion; exit 1           ;;
    esac
done

test -n "$VERBOSE" || echo >&2 'Sanity Checking'

if [[ -n "$opt_pkg" ]]; then
    pkg="$opt_pkg"
fi

if [[ -n "$1" ]]; then
    pkg=$1
fi


test -n "$pkg" || echo >&2 No package name provided
test -n "$pkg" || exit 1

if which satisfydeps >/dev/null 2>&1; then
    test -n "$VERBOSE" || echo >&2 'Good, have a satisfydeps file'
else
    echo >&2 Could not file satisfydeps file
    exit 3
fi


# Mount the hostdir
test -n "$VERBOSE" || echo >&2 'Mount the host dir'
#test -d $mount_point/input || $action sudo mount $mount_point
mountpoint -q "$workdir_top" || \
    sudo mount -t 9p -o trans=virtio,version=9p2000.L,ro  "$workdir_top" "$workdir_top"
mountpoint -q $results_dir || \
    sudo mount -t 9p -o trans=virtio,version=9p2000.L,rw  "$results_dir" "$results_dir"


if [[ ! -d "$workdir_top/$pkg" ]]; then
    echo >&2 No working directory found for "$pkg"
    exit 4
fi

if [[ ! -d "$staging_dir" ]]; then
    echo >&2 No staging directory found "$staging_dir"
    mkdir -p "$staging_dir"
fi

test -n "$VERBOSE" || echo >&2 'calculate version numbers'

cd "$workdir_top/$pkg"

changelog=$(find $pkg* -wholename '*/debian/changelog')
#debdir=$(dirname "$changelog")
#topdir=$(dirname "$debdir")

version=$(LC_ALL=C dpkg-parsechangelog -l"$changelog" | sed -ne 's/^Version: //p' )
non_epoch_version=$(echo -n "$version" | LC_ALL=C perl -pe 's/^\d+://')
upstream_version=$(echo -n "$non_epoch_version" | sed  -e 's/-[^-]*$//')
debian_version=$(echo -n "$non_epoch_version" | LC_ALL=C   perl -nle 'm/-([^-]*)$/ && print $1')

host_arch=$(dpkg-architecture -qDEB_HOST_ARCH)
log_file_name=${pkg}_${non_epoch_version}_${host_arch}.build

if [[ -n "$debian_version" ]]; then
    upstream_tarball=$workdir_top/$pkg/${pkg}_${upstream_version}.orig.tar.gz
else
    upstream_tarball=
fi

test -n "$VERBOSE" || echo >&2 'Copy source'

if [ -n "$debian_version"  ]; then
    if [ -d "$pkg"  ]; then
        echo >&2 We have an unversioned source dir, and yet a debian version
        echo >&2 "[ $debian_version ]"
         echo >&2 "This is confusing, but trying to continue"
        $action mv "$pkg" "$pkg-$upstream_version"
    fi
    if [[ -d "$staging_dir/$pkg-$upstream_version" ]]; then
        echo >&2 The distrination directory "$staging_dir/$pkg" already exists
        echo >&2 removing "$staging_dir/$pkg-$upstream_version"
        $action rm -fr "$staging_dir/$pkg-$upstream_version"
    fi
    $action cp -a "$pkg-$upstream_version" "$staging_dir"
    if [[ -n "$upstream_tarball" ]] &&  [[ -e "$upstream_tarball" ]]; then
        echo >&2 "Exporting upstream sources to $staging_dir ."
        $action cp -pf "$upstream_tarball" "$staging_dir"
    else
        echo >&2 Could not find upstream source
        exit 7
    fi
else
    if [[ -z "$debian_version" ]]; then
        echo >&2 We have an versioned source dir, and yet no debian version
        echo >&2 This is confusing
        $action mv "$pkg-$upstream_version" "$pkg"
    fi
    # Get ready to copy the source dir over,
    if [[ -d "$staging_dir/$pkg-$upstream_version" ]]; then
        echo >&2 The distrination directory "$staging_dir/$pkg-$upstream_version" already exists
        echo >&2 removing "$staging_dir/$pkg-$upstream_version"
        $action rm -r "$staging_dir/$pkg-$upstream_version"
    fi

    $action cp -a "$pkg $staging_dir/$pkg-$upstream_version"
fi

# Clean up the git stuff
test -n "$VERBOSE" || echo >&2 'Clean up the git stuff'
$action find  "$staging_dir/$pkg-$upstream_version"                                      \
        -depth \( \( -type f -a -name .gitmodules \) -o \( -type d -a -name .git \) \) \
                          -exec rm -rf {} \;


# Install the build dependencies
test -n "$VERBOSE" || echo >&2 'Install the build dependencies'
$action sudo apt-get install --no-install-recommends -fy    \
    $($action satisfydeps "$staging_dir/$pkg-$upstream_version/debian/control")


# Build
test -n "$VERBOSE" || echo >&2 'Build the package'
cd "$staging_dir/$pkg-$upstream_version"
$action dpkg-buildpackage -i'(?:^|/).*~$|(?:^|/)\.#.*$|(?:^|/)\..*\.swp$|(?:^|/),,.*(?:$|/.*$)|(?:^|/)(?:DEADJOE|\.cvsignore|\.arch-inventory|\.bzrignore|\.gitignore)$|(?:^|/)(?:CVS|RCS|\.deps|\{arch\}|\.arch-ids|\.svn|\.hg|_darcs|\.git|.gitmodules|\.shelf|_MTN|\.bzr(?:\.backup|tags)?)(?:$|/.*$)' -D -rfakeroot 2>&1 | tee "$staging_dir/${log_file_name}"

# Build a second time
test -n "$VERBOSE" || echo >&2 'Build the package a second time'
$action dpkg-buildpackage -i'(?:^|/).*~$|(?:^|/)\.#.*$|(?:^|/)\..*\.swp$|(?:^|/),,.*(?:$|/.*$)|(?:^|/)(?:DEADJOE|\.cvsignore|\.arch-inventory|\.bzrignore|\.gitignore)$|(?:^|/)(?:CVS|RCS|\.deps|\{arch\}|\.arch-ids|\.svn|\.hg|_darcs|\.git|.gitmodules|\.shelf|_MTN|\.bzr(?:\.backup|tags)?)(?:$|/.*$)' -D -rfakeroot 2>&1 | tee -a "$staging_dir/${log_file_name}"

# Last sanity check
test -n "$VERBOSE" || echo >&2 'Verify the integrity of the original sources'
if [ -n "$debian_version" ]; then
    if ! cmp "$workdir_top/$pkg/${pkg}_${upstream_version}.orig.tar.gz" \
           "$staging_dir/${pkg}_${upstream_version}.orig.tar.gz" ; then
        echo >&2 Upstream sources corrupted
        exit 9
    fi
fi


# Copy the results
test -n "$VERBOSE" || echo >&2 'Copy the results'
cd "$staging_dir"
if [[ ! -d "$results_dir/$pkg" ]]; then
    $action mkdir -p "$results_dir/$pkg"
    $action chmod 755 "$results_dir/$pkg"
fi
if [ -d "$results_dir/$pkg" ]; then
    for i in *; do
        if [ -f "$i" ]; then
            $action cp "$i" "$results_dir/$pkg/"
        fi
    done
    cd ..
    rm -rf "$staging_dir" || true
else
    echo >&2 Could not create results dir
fi

test -n "$VERBOSE" || echo >&2 'All done'

exit 0
