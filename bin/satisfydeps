#! /usr/bin/perl -w
# File: newparser.pl
# Time-stamp: <2014-06-20 21:17:09 srivasta>
#
# Copyright (C) 2008 by Manoj Srivastava
#
# Author: Manoj Srivastava
#
# Description:
#
use warnings;
use strict;
use Carp;

use Data::Dumper;
$Data::Dumper::Indent   = 1;
$Data::Dumper::Sortkeys = 1;

use Dpkg::Arch qw(get_host_arch);
use Dpkg::Deps;
use Parse::DebControl;

our $VERSION = 2.0;

my $parser = Parse::DebControl->new();
my %options = ( stripComments => 1 );

use Dpkg::Control;

my $controlfile = shift || 'debian/control';
my $data = $parser->parse_file( $controlfile, \%options );
my $source = $data->[0];

exit unless $source->{'Build-Depends'} || $source->{'Build-Depends-Indep'};
my $build_arch = Dpkg::Arch::get_build_arch();

my $facts = Dpkg::Deps::KnownFacts->new();

sub get_facts ($) {
  my ($STATUS) = @_;
  while (<$STATUS>) {
    next unless /^Status: .*ok installed$/msx;
    my ($package) = /^Package: (.*)$/msx;
    my ($version) = /^Version: (.*)$/msx;
    $facts->add_installed_package( $package, $version );
    if (/^Provides: (.*)$/msx) {
      my $provides
        = Dpkg::Deps::deps_parse( $1, reduce_arch => 1, union => 1 );
      next if not defined $provides;
      foreach my $dep ( grep { $_->isa('Dpkg::Deps::Simple') }
        $provides->get_deps() ) {
        $facts->add_provided_package( $dep->{package}, $dep->{relation},
          $dep->{version}, $package );
      }
    } ## end if (/^Provides: (.*)$/msx)
  } ## end while (<$STATUS>)
  return;
} ## end sub get_facts ($)

{
  local $/ = q{};    # enable localized slurp mode
  open my $STATUS, q{<}, '/var/lib/dpkg/status'
    || croak "Could not read /var/lib/dpkg/status: $!\n";
  get_facts($STATUS);
  close $STATUS || croak "Could not close /var/lib/dpkg/status: $!\n";
}

my @missing;
my $line = $source->{'Build-Depends'};
$line =~ s/\s*\n\s*/ /msxg;
my $dependencies = Dpkg::Deps::deps_parse( $line, reduce_arch => 1 );

if ( !$dependencies->is_empty() ) {
  $dependencies->simplify_deps($facts);
  push @missing, $dependencies->get_deps();
}

$line = $source->{'Build-Depends-Indep'};
$line =~ s/\s*\n\s*/ /msxg;
$dependencies = Dpkg::Deps::deps_parse( $line, reduce_arch => 1 );
if ( !$dependencies->is_empty() ) {
  $dependencies->simplify_deps($facts);
  push @missing, $dependencies->get_deps();
}

exit 0 unless @missing;

#  Now, either we have         Dpkg::Deps::Simple  or Dpkg::Deps::AND
#  Dpkg::Deps::AND can contain Dpkg::Deps::Simple  or Dpkg::Deps::OR objects
#  Dpkg::Deps::OR  can contain Dpkg::Deps::Simple  objects only

foreach my $dep (@missing) {
  next if $dep->is_empty();
  if ( ref $dep eq 'Dpkg::Deps::Simple' ) {
    if ( defined $dep->{package} ) {
      print "$dep->{package}\n" or croak "Could not print: $!";
    }
  }
  elsif ( ref $dep eq 'Dpkg::Deps::OR' ) {
    my @alternatives = $dep->get_deps();
    foreach my $alt (@alternatives) {
      if ( defined $alt->{package} ) {
        print "$alt->{package}\n" or croak "Could not print: $!";
        last;
      }
    } ## end foreach my $alt (@alternatives)
  } ## end elsif ( ref $dep eq 'Dpkg::Deps::OR')
} ## end foreach my $dep (@missing)
