#!/usr/bin/perl -w
#                              -*- Mode: Cperl -*- 
# ptl.pl --- 
# Author           : Manoj Srivastava ( srivasta@anzu.internal.golden-gryphon.com ) 
# Created On       : Sat Oct 27 14:35:22 2007
# Created On Node  : anzu.internal.golden-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Wed Nov 14 01:46:17 2007
# Last Machine Used: anzu.internal.golden-gryphon.com
# Update Count     : 73
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
# 

my %data;
format STDOUT_TOP =
          Ham                       Spam                      Overall                  Validation
  Count Correct   Accuracy   Count Correct   Accuracy   Count Correct   Accuracy         Regexp
  ----- -------  ----------  ----- -------  ----------  ----- -------  ---------- ------------------------
.

format STDOUT =
 @#####  @##### @###.###### @#####  @##### @###.###### @#####  @##### @###.###### @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 $data{Ham}, $data{Ham_Correct}, $data{Ham_Accuracy}, $data{Spam}, $data{Spam_Correct}, $data{Spam_Accuracy}, $data{All}, $data{All_Correct}, $data{All_Accuracy}, $data{Validation}
.

my $table_top=<<'EOF';
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
   <title>Training accuracy for CRM114</title>
   <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
   <meta name="Author" content="Manoj Srivastava"/>
   <link href="mailto:srivasta@debian.org" rev="made"/>
    <link href="mailto:srivasta@debian.org" rev="made"/>
    <link href="/styles/simple_screen.css" type="text/css" rel="stylesheet" media="screen" />
    <link href="/styles/simple_print.css" type="text/css" rel="stylesheet" media="print" />
    <link href="/styles/common.css" type="text/css" rel="stylesheet" />
    <style type="text/css" media="all">
      address {
        color: gray; 
        margin-left: -2em;
        text-align: right;
      }     
      tt, code, kbd, samp      { font-family: monospace }

      p.initial:first-letter {
         font-size: 215%;
         /*  padding: 0em; float: left; */
      }
      p.stb { text-indent: 0; margin-top: 0.83em }
      p.mtb { text-indent: 0; margin-top: 2.17em }
      p.ltb { text-indent: 0; margin-top: 3.08em }

      .center          {text-align: center;}

      /*
       * This is used to create rules and additional markers for
       * browsers like w3m, which do not support css at all.
       */
      .nocss {display: none; }

      /*
       * Get a nice, 3d look for tables
       */
      table {
        border-collapse: collapse; /*separate; */
        border: outset 2pt;
        border-spacing: 0pt;
        /* border-spacing: 5pt; */
      }

      /*
        td { border: inset 2pt }
        th { border: inset 2pt }
      */
      td             { border: 1px solid; padding: 0.25em; }
      th             { border: 2px solid; padding: 0.25em; }

      /* Shouldn't the definition term be bold by default? */
      dt {font-weight: bold;}
      /* 
       * Add space at the bottom of the list, or else it seems to run
       * into the following content
       */
      dd {margin-bottom: 0.66em;}

      /* Make the titles stand out */
      h1.title                 {
        color: black;
        text-align: center; 
        font-variant: small-caps;
        font-family: helvetica, Verdana, Myriad Web, Syntax, sans-serif; 
        font-weight: bold; 
        text-transform: capitalize;
        text-shadow: 0.3em 0.3em 0.1em #F00;
      }
      .titletext               {
        color: black;
        font-size: 18pt;
        font-weight: bold;
        margin-bottom: -10px;
      }

      h2.section {text-transform: capitalize; text-decoration:
                  underline;  margin-left: 5%; }
      OL OL    { list-style: lower-roman; }
      UL OL    { list-style: decimal; }
      OL OL OL { list-style: lower-alpha; }

      .hint, .alt-hint {
        width: 14em;
        padding: 1em;
        color: #000;
        background: #CFC;
        border-right: solid thick #CCC;
        border-bottom: solid thick #CCC;
        font-style: italic;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
      }
      .hint {
        float: right;
        text-align: right;
        margin-left: 1em;
        margin-right: 0;
      }
      .alt-hint {
        float: left;
        /* margin-left: -6%; This doesn't work in IE 5 :-( */
        text-align: left;
        margin-left: 0;
        margin-right: 1em;
      }
      .hint ul, .hint ol {
        /*text-align: left;*/
        margin-left: 0;
        padding-left: 0;
        list-style-position: inside;
      }
      .hint li {
        margin-left: 0;
      }
      .hint em, .alt-hint em {
        font-style: normal;
      }
      .hint em em, .alt-hint em em {
        font-style: italic;
      }

      /* Use nohint for what should be displayed if the UA doesn't
      support hints */
      .nohint {
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>Training accuracy for CRM114</h1>

    <p>
      I have often blogged about the efficiency of my Spam filtering
      setup, I've claimed that the combined CRM114 and Spamassasin
      setup I have is 99.92% (99.98% when both my classifiers are
      sure), but I have had very little data to back that up. I still
      have not gotten around to automating my setup's overall accuracy,
      but now I have some figures on <em>one</em> of the two classifies
      in my system.  Here is the data from CRM114.
    </p>
    <p>
      First, some context: when training CRM114 using the
      <code>mailtrainer</code> command, one can specify to leave out a
      certain percentage of the training set in the learn phase, and
      run a second pass over the mails so skipped to test the accuracy
      of the training.  The way you do this is by specifying a regular
      expression to match the file names.  Since my training set has
      message numbers, it was simple to use the least significant two
      digits as a regexp; but I did not like the idea of always
      leaving out the same messages.  So I now generate four sets of
      numbers for every training run, and can optionally reserve 0%,
      1%, 2%, 4%, or 10% of all mails for the accuracy run. Usually
      I train with 0% reserved.  When the css files are new and still
      changing a lot, I measure accuracy with 2% reserved, and later
      on, I reserve 10% in the accuracy test runs.
    </p>
    <p>
       An interesting thing to note is the assymetry in the accuracy:
       CRM114 has never identified a Spam message incorrectly. This is
       because the training mechanism is skewed towards letting a few
       spam mesages slip through, rather than let a good message slip
       into the spam folder.  I like that. So, here are the accuracy 
       numbers for CRM114; adding in Spamassassin into the mix only
       improves the numbers.  Also, I have always felt that a freshly
       learned css file is somewhat brittle -- in the sense that if one
       trains an <q>unsure</q> message, and then tried to TUNE (Train
       Until No Errors) the css file, a large number of runs through
       the training set are needed until the thing stabilizes. So it
       is as if the learning done initially was  minimalistic, and
       adding the information for the new unsure message required all
       kinds of tweaking. After a while TOEing (Training on Errors)
       and TUNEing, this brittleness seems to get hammered out of the
       CSS files. I also expect to see accuracy rise as the css files
       get less brittle -- The table below starts with data from a newly
       minted .css file, and as you can see, the accuracy climbs,
       especially after I swithc to reserving 10% of mails for the
       accuracy run.

    </p>
    <table class="center" title="Training Results" width="100%">
      <caption><strong>Accuracy number and validation regexp</strong></caption>
      <tr>
        <th>Date</th>
        <th>Corpus</th>
        <th colspan="3">Ham</th>
        <th colspan="3">Spam</th>
        <th colspan="3">Overall</th>
        <th>Validation</th>
      </tr>
      <tr>
        <th>&nbsp;</th>
        <th>Size</th>
        <th>Count</th>
        <th>Correct</th>
        <th>Accuracy</th>
        <th>Count</th>
        <th>Correct</th>
        <th>Accuracy</th>
        <th>Count</th>
        <th>Correct</th>
        <th>Accuracy</th>
        <th>Regexp</th>
      </tr>
EOF
  ;

my $table_bot=<<EOBOT;
    </table>
  </body>
</html>
EOBOT
;

sub write_html() {
  print OUTPUT "     <tr>\n";
  printf OUTPUT "        <th style=\"text-align: center;\">%s</th>\n", $data{Date};
  printf OUTPUT "        <th style=\"text-align: right;\">%5d</th>\n", $data{Size};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{Ham};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{Ham_Correct};
  printf OUTPUT "        <th style=\"text-align: right;\">%3f</th>\n", $data{Ham_Accuracy};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{Spam};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{Spam_Correct};
  printf OUTPUT "        <th style=\"text-align: right;\">%3f</th>\n", $data{Spam_Accuracy};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{All};
  printf OUTPUT "        <th style=\"text-align: right;\">%4d</th>\n", $data{All_Correct};
  printf OUTPUT "        <th style=\"text-align: right;\">%3f</th>\n", $data{All_Accuracy};
  printf OUTPUT "        <th style=\"text-align: center;\">%s</th>\n", $data{Validation};
  print OUTPUT "     </tr>\n";
}

open (OUTPUT, ">/var/www/software/spam/crm114_accuracy.html") || die "Could not open /var/www/software/spam/crm114_accuracy.html:$!";
print OUTPUT $table_top;
while (<>) {
  chomp;
  if (/^\s*Excellent.\s*Got a streak of\s*(\d+)\s*without errors./) {
    $data{Size} = $1 - 10;
    next;
  }
  if (/^\s*Summary of validation on ([^:]+):/) {
    $data{Validation} = $1;
    next;
  }
  if (/^\s*Good files:\s*(\d+)\s*correct:\s*(\d+)\s*accuracy:\s*([\d\.]+)/) {
    $data{Ham}          = $1;
    $data{Ham_Correct}  = $2;
    $data{Ham_Accuracy} = $3;
    next;
  }
  if (/^\s*Spam files:\s*(\d+)\s*correct:\s*(\d+)\s*accuracy:\s*([\d\.]+)/) {
    $data{Spam}          = $1;
    $data{Spam_Correct}  = $2;
    $data{Spam_Accuracy} = $3;
    next;
  }
  if (/^\s*Overall:\s*(\d+)\s*correct:\s*(\d+)\s*accuracy:\s*([\d\.]+)/) {
    $data{All}          = $1;
    $data{All_Correct}  = $2;
    $data{All_Accuracy} = $3;
  }
  if (/^\s*Date:(.*)$/) {
    $data{Date} = $1;
    $data{Date} =~  s/\s*$//og;
    #write;
    write_html;
    %data = ();
  }
}
print OUTPUT $table_bot;
